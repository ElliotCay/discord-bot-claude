from discord.ext import commands
import discord
import anthropic
import os
import json
from datetime import datetime, timedelta
import logging
from ..utils.conversation_manager import ConversationManager
from ..utils.cost_tracker import CostTracker
from ..utils.system_prompt_manager import SystemPromptManager

class ClaudeCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.logger = logging.getLogger('discord_claude_bot')
        self.system_prompt_manager = SystemPromptManager()
        
        try:
            api_key = os.getenv('ANTHROPIC_API_KEY')
            self.logger.info(f"API Key pr√©sente : {'Oui' if api_key else 'Non'}")
            self.client = anthropic.Anthropic(
                api_key=api_key,
                timeout=30.0,  # Timeout en secondes
                max_retries=2  # Limite les retries
            )
            self.logger.info("Client Anthropic initialis√© avec succ√®s")
        except Exception as e:
            self.logger.error(f"Erreur lors de l'initialisation du client Anthropic: {str(e)}")
            raise e
        
        self.conversation_manager = ConversationManager()
        self.cost_tracker = CostTracker()
    
        # D√©finition des mod√®les disponibles
        self.models = {
            'kask': 'claude-3-5-haiku-20241022',  # Nouveau mod√®le par d√©faut
            'kask-haiku': 'claude-3-haiku-20240307',  # Ancien mod√®le Haiku
            'kask-sonnet': 'claude-3-sonnet-20240229',
            'kask-opus': 'claude-3-opus-20240229'
        }

        # D√©finition des co√ªts par mod√®le (prix par 1K tokens)
        self.costs = {
            'claude-3-5-haiku-20241022': {'input': 0.001, 'output': 0.005},  # Nouveau mod√®le
            'claude-3-haiku-20240307': {'input': 0.00025, 'output': 0.00025},
            'claude-3-sonnet-20240229': {'input': 0.003, 'output': 0.003},
            'claude-3-opus-20240229': {'input': 0.008, 'output': 0.008}
        }

    def calculate_cost(self, model, input_tokens, output_tokens):
        """Calcule le co√ªt d√©taill√© d'une requ√™te"""
        model_costs = self.costs[model]
        input_cost = (input_tokens / 1000) * model_costs['input']
        output_cost = (output_tokens / 1000) * model_costs['output']
        total_cost = input_cost + output_cost
        
        return {
            'input_cost': input_cost,
            'output_cost': output_cost,
            'total_cost': total_cost,
            'input_tokens': input_tokens,
            'output_tokens': output_tokens
        }

    async def send_response(self, ctx, response_text, cost_details):
        """Envoie la r√©ponse"""
        if len(response_text) > 2000:  # Limite standard de Discord
            chunks = [response_text[i:i+2000] for i in range(0, len(response_text), 2000)]
            for chunk in chunks:
                await ctx.send(chunk)
        else:
            await ctx.send(response_text)

    async def get_message_chain(self, channel, message_id):
        """R√©cup√®re la cha√Æne compl√®te des messages li√©s"""
        messages = []
        current_id = message_id
        max_depth = 10  # Limite de profondeur pour √©viter les boucles infinies
        
        self.logger.info(f"\n=== D√©but de la r√©cup√©ration de la cha√Æne de messages ===")
        self.logger.info(f"Message initial ID: {message_id}")
        
        while current_id and len(messages) < max_depth:
            try:
                current_message = await channel.fetch_message(current_id)
                self.logger.info(f"\nMessage trouv√© dans la cha√Æne:")
                self.logger.info(f"ID: {current_message.id}")
                self.logger.info(f"Auteur: {current_message.author.name}")
                self.logger.info(f"Contenu: {current_message.content}")
                
                # Ajouter le message au d√©but de la liste pour maintenir l'ordre chronologique
                messages.insert(0, current_message)
                
                # V√©rifier s'il y a un message parent
                if current_message.reference:
                    current_id = current_message.reference.message_id
                    self.logger.info(f"Ce message r√©pond au message: {current_id}")
                else:
                    self.logger.info("Fin de la cha√Æne (pas de r√©f√©rence)")
                    break
                
            except discord.NotFound:
                self.logger.error(f"Message {current_id} non trouv√©")
                break
            except Exception as e:
                self.logger.error(f"Erreur lors de la r√©cup√©ration du message {current_id}: {str(e)}")
                break
        
        self.logger.info(f"\nNombre total de messages dans la cha√Æne: {len(messages)}")
        return messages
    
    def format_message_chain(self, messages):
        """Formate la cha√Æne de messages pour Claude"""
        formatted_conversation = []
        
        self.logger.info("\n=== Formatage de la cha√Æne de messages ===")
        
        for idx, msg in enumerate(messages):
            # D√©terminer le r√¥le en fonction de l'auteur
            is_bot = msg.author.id == self.bot.user.id
            role = "assistant" if is_bot else "user"
            
            # Nettoyer le contenu si n√©cessaire
            content = msg.content
            if not is_bot:
                # Nettoyer les mentions du bot et les commandes
                content = content.replace(f'<@{self.bot.user.id}>', '').strip()
                if content.startswith('!k'):
                    content = content[content.index(' ')+1:] if ' ' in content else ''
            
            # Si le contenu n'est pas vide apr√®s nettoyage
            if content.strip():
                self.logger.info(f"\nMessage {idx + 1}:")
                self.logger.info(f"Role: {role}")
                self.logger.info(f"Contenu original: {msg.content}")
                self.logger.info(f"Contenu nettoy√©: {content}")
                
                formatted_conversation.append({
                    "role": role,
                    "content": content
                })
        
        return formatted_conversation

    async def handle_claude_request(self, ctx, message, model_key):
        """Version compl√®te optimis√©e"""
        if not message and not ctx.message.reference:
            await ctx.send(f"Merci de fournir un message avec la commande !{model_key}")
            return

        if ctx.message.reference:
            await self.handle_contextual_command(
                ctx.message, 
                await ctx.channel.fetch_message(ctx.message.reference.message_id), 
                model_key
            )
            return

        try:
            # Message d'attente modifiable
            wait_message = await ctx.send("‚è≥ G√©n√©ration de la r√©ponse en cours... (~30s)")
        
            start_time = datetime.now()
            
            # R√©cup√©ration du prompt syst√®me
            prompt_name, system_prompt = self.system_prompt_manager.get_active_prompt()
            
            # Log de d√©but
            start_time = datetime.now()
            self.logger.info(f"\n=== Nouvelle requ√™te Claude ===\n‚è∞ D√©but : {start_time.strftime('%H:%M:%S.%f')[:-3]}")

            # Construction des messages
            messages = [{
                "role": "user",
                "content": [{"type": "text", "text": message}]
            }]

            # Ajout du system prompt si pr√©sent
            if system_prompt:
                messages.insert(0, {
                    "role": "system",
                    "content": [{"type": "text", "text": system_prompt}]
                })

            # Appel API
            response = self.client.messages.create(
                model=self.models[model_key],
                max_tokens=1000,
                messages=messages,
                temperature=0.7
            )
            
            # Logs et mesures
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            self.logger.info(f"‚è±Ô∏è Dur√©e : {duration:.2f}s - Tokens : {response.usage.input_tokens}/{response.usage.output_tokens}")

            # Mise √† jour du message d'attente avec le temps r√©el
            await wait_message.edit(content=f"‚åõ R√©ponse g√©n√©r√©e en {duration:.2f}s")
            
            # Tracking des co√ªts
            self.cost_tracker.track_request(
                model=self.models[model_key],
                input_tokens=response.usage.input_tokens,
                output_tokens=response.usage.output_tokens
            )

            # Envoi des r√©ponses
            if system_prompt:
                await ctx.send(f"üîß Prompt : `{prompt_name}`")
            
            await self.send_response(ctx, response.content[0].text, None)

        except Exception as e:
            self.logger.error(f"Erreur Claude: {str(e)}")
            await ctx.send("‚ùå D√©sol√©, une erreur s'est produite lors de la g√©n√©ration de la r√©ponse.")
    
    async def handle_contextual_command(self, command_message, referenced_message, model_key='kask'):
        """G√®re une commande !k* qui r√©pond √† un message sp√©cifique"""
        self.logger.info("\n=== Traitement d'une commande contextuelle ===")
        try:
            # Message d'attente modifiable
            wait_message = await command_message.channel.send("‚è≥ G√©n√©ration de la r√©ponse en cours... (~30s)")
            
            # R√©cup√©ration et formatage de la cha√Æne de messages
            message_chain = await self.get_message_chain(command_message.channel, referenced_message.id)
            
            # Construction des messages
            messages = []
            
            # Ajout du prompt syst√®me si pr√©sent
            prompt_name, system_prompt = self.system_prompt_manager.get_active_prompt()
            if system_prompt:
                messages.append({
                    "role": "system",
                    "content": [{"type": "text", "text": system_prompt}]
                })
            
            # Ajout de l'historique des messages
            for msg in message_chain:
                role = "assistant" if msg.author.id == self.bot.user.id else "user"
                content = msg.content
                if role == "user":
                    content = content.replace(f'<@{self.bot.user.id}>', '').strip()
                    if content.startswith('!k'):
                        content = content[content.index(' ')+1:] if ' ' in content else ''
                
                if content.strip():
                    messages.append({
                        "role": role,
                        "content": [{"type": "text", "text": content}]
                    })

            # Ajout de la nouvelle commande si pr√©sente
            command_content = command_message.content[len(model_key) + 2:].strip()
            if command_content:
                messages.append({
                    "role": "user",
                    "content": [{"type": "text", "text": command_content}]
                })

            start_time = datetime.now()
            
            # Appel API
            response = self.client.messages.create(
                model=self.models[model_key],
                max_tokens=1000,
                messages=messages,
                temperature=0.7
            )

            # Calcul de la dur√©e
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            # Mise √† jour du message d'attente
            await wait_message.edit(content=f"‚åõ R√©ponse g√©n√©r√©e en {duration:.2f}s")

            # Tracking des co√ªts
            self.cost_tracker.track_request(
                model=self.models[model_key],
                input_tokens=response.usage.input_tokens,
                output_tokens=response.usage.output_tokens
            )

            # Envoi de la r√©ponse
            if system_prompt:
                await command_message.channel.send(f"üîß Prompt : `{prompt_name}`")
            await self.send_response(command_message.channel, response.content[0].text, None)

        except Exception as e:
            self.logger.error(f"Erreur lors du traitement de la commande contextuelle : {e}", exc_info=True)
            await command_message.reply("‚ùå D√©sol√©, une erreur s'est produite lors du traitement de votre commande.")

    @commands.command(name='kask')
    async def kask(self, ctx, model_arg=None, *, message=None):
        """
        Pose une question √† Claude avec choix du mod√®le optionnel
        Usage: !kask [mod√®le] message
        Mod√®les disponibles: haiku (ancien), sonnet, opus
        """
        # G√©rer les r√©ponses contextuelles
        if ctx.message.reference:
            await self.handle_contextual_command(ctx.message, await ctx.channel.fetch_message(ctx.message.reference.message_id))
            return

        # Si pas de message du tout
        if not model_arg:
            await ctx.send("Usage: !kask [mod√®le] message\nMod√®les disponibles: haiku (ancien), sonnet, opus")
            return

        # D√©tecter si le premier argument est un mod√®le
        selected_model = 'kask'  # mod√®le par d√©faut
        if model_arg.lower() in ['haiku', 'sonnet', 'opus']:
            if not message:  # Si on a sp√©cifi√© un mod√®le mais pas de message
                await ctx.send("Merci de fournir un message avec la commande !kask")
                return
            selected_model = f'kask-{model_arg.lower()}'
            if model_arg.lower() == 'haiku':
                selected_model = 'kask-haiku'  # Pour utiliser l'ancien Haiku
        else:
            # Si le premier argument n'est pas un mod√®le, c'est le d√©but du message
            message = f"{model_arg} {message if message else ''}"

        # Utiliser handle_claude_request pour traiter la demande
        await self.handle_claude_request(ctx, message, selected_model)



    @commands.command(name='kstats')
    async def kstats(self, ctx, period='day'):
        """Affiche les statistiques d'utilisation (day/week/all)"""
        try:
            report = self.cost_tracker.generate_report(period)
            # D√©coupage du rapport en chunks si n√©cessaire
            max_length = 1990  # Limite de Discord moins une marge
            chunks = [report[i:i + max_length] for i in range(0, len(report), max_length)]
            for chunk in chunks:
                await ctx.send(f"```md\n{chunk}\n```")
        except Exception as e:
            self.logger.error(f"Erreur lors de la g√©n√©ration des stats: {str(e)}")
            await ctx.send("D√©sol√©, une erreur s'est produite lors de la g√©n√©ration des statistiques.")

    @commands.command(name='kexport')
    async def export_stats(self, ctx):
        """Exporte toutes les statistiques en CSV"""
        file_path = self.cost_tracker.export_stats_to_csv()
        if file_path:
            await ctx.send(
                "Voici l'export des statistiques :", 
                file=discord.File(file_path)
            )
        else:
            await ctx.send("D√©sol√©, une erreur s'est produite lors de l'export des statistiques.")

    @commands.command(name='kclear')
    async def clear_conversation(self, ctx):
        """Efface l'historique de la conversation courante"""
        self.conversation_manager.clear_conversation(ctx.channel.id)
        await ctx.send("Historique de conversation effac√©.")

    @commands.command(name='khelp')
    async def help_command(self, ctx):
        """Affiche la liste des commandes disponibles"""
        help_text = """**Liste des commandes disponibles**

    ü§ñ Commandes de conversation :
    - `!kask <message>` - Poser une question en utilisant Claude 3.5 Haiku (par d√©faut)
    - `!kask haiku <message>` - Poser une question en utilisant Claude 3 Haiku (ancienne version)
    - `!kask sonnet <message>` - Poser une question en utilisant Claude Sonnet
    - `!kask opus <message>` - Poser une question en utilisant Claude Opus
    - `!kclear` - Efface l'historique de la conversation courante

    üìä Commandes de statistiques :
    - `!kstats` - Affiche les statistiques d'utilisation du jour
    - `!kexport` - Exporte toutes les statistiques au format CSV

    üîß Commandes de prompt syst√®me :
    - `!ksys create <nom> <prompt>` - Cr√©er un prompt syst√®me
    - `!ksys list` - Lister les prompts syst√®me
    - `!ksys show <nom>` - Afficher un prompt syst√®me
    - `!ksys use <nom>` - Utiliser un prompt syst√®me
    - `!ksys clear` - D√©sactiver le prompt syst√®me actif
    - `!ksys delete <nom>` - Supprimer un prompt syst√®me

    ‚ÑπÔ∏è Commande d'aide :
    - `!khelp` - Affiche ce message d'aide

    Note : Le bot ne r√©pond qu'√† son propri√©taire pour des raisons de s√©curit√© et de co√ªt."""
        await ctx.send(help_text)    

    @commands.command(name='ksys')
    async def system_prompt(self, ctx, action=None, name=None, *, content=None):
        """G√®re les prompts syst√®me"""
        help_text = """**Gestion des prompts syst√®me**
        
    - `!ksys create <nom> <prompt>` - Cr√©er/modifier un prompt syst√®me
    - `!ksys list` - Lister tous les prompts syst√®me
    - `!ksys show <nom>` - Afficher un prompt syst√®me sp√©cifique
    - `!ksys use <nom>` - Utiliser un prompt syst√®me
    - `!ksys clear` - D√©sactiver l'utilisation du prompt syst√®me
    - `!ksys delete <nom>` - Supprimer un prompt syst√®me"""

        if not action:
            await ctx.send(help_text)
            return

        action = action.lower()

        if action == 'list':
            prompts = self.system_prompt_manager.get_all_prompts()
            if not prompts:
                await ctx.send("Aucun prompt syst√®me d√©fini.")
                return

            active_name, _ = self.system_prompt_manager.get_active_prompt()
            
            response = "**Prompts syst√®me disponibles :**\n\n"
            for name, data in prompts.items():
                active_marker = "‚úÖ " if name == active_name else "  "
                created = datetime.fromisoformat(data['created_at']).strftime("%d/%m/%Y")
                updated = datetime.fromisoformat(data['updated_at']).strftime("%d/%m/%Y")
                response += f"{active_marker}`{name}`\n"
                response += f"  Cr√©√© le : {created}\n"
                response += f"  Derni√®re modification : {updated}\n\n"

            await ctx.send(response)

        elif action == 'show':
            if not name:
                await ctx.send("‚ùå Veuillez sp√©cifier le nom du prompt √† afficher.")
                return

            prompt = self.system_prompt_manager.get_prompt(name)
            if not prompt:
                await ctx.send(f"‚ùå Prompt '{name}' non trouv√©.")
                return

            response = f"**Prompt syst√®me : {name}**\n\n"
            response += f"```\n{prompt['content']}\n```\n"
            response += f"Cr√©√© le : {datetime.fromisoformat(prompt['created_at']).strftime('%d/%m/%Y')}\n"
            response += f"Derni√®re modification : {datetime.fromisoformat(prompt['updated_at']).strftime('%d/%m/%Y')}"
            
            await ctx.send(response)

        elif action == 'create':
            if not name or not content:
                await ctx.send("‚ùå Veuillez sp√©cifier un nom et un contenu pour le prompt.")
                return

            if self.system_prompt_manager.create_prompt(name, content):
                await ctx.send(f"‚úÖ Prompt syst√®me '{name}' cr√©√©/modifi√© avec succ√®s.")
            else:
                await ctx.send("‚ùå Erreur lors de la cr√©ation du prompt syst√®me.")

        elif action == 'use':
            if not name:
                await ctx.send("‚ùå Veuillez sp√©cifier le nom du prompt √† utiliser.")
                return

            if self.system_prompt_manager.set_active_prompt(name):
                await ctx.send(f"‚úÖ Prompt syst√®me '{name}' activ√©.")
            else:
                await ctx.send(f"‚ùå Prompt '{name}' non trouv√©.")

        elif action == 'clear':
            self.system_prompt_manager.set_active_prompt(None)
            await ctx.send("‚úÖ Plus aucun prompt syst√®me actif.")

        elif action == 'delete':
            if not name:
                await ctx.send("‚ùå Veuillez sp√©cifier le nom du prompt √† supprimer.")
                return

            if self.system_prompt_manager.delete_prompt(name):
                await ctx.send(f"‚úÖ Prompt syst√®me '{name}' supprim√©.")
            else:
                await ctx.send(f"‚ùå Prompt '{name}' non trouv√©.")

        else:
            await ctx.send(f"‚ùå Action '{action}' non reconnue.\n\n{help_text}")

    @commands.command(name='ktest')
    async def test_latency(self, ctx):
        """Test simple de la latence de l'API Claude"""
        ping_time = datetime.now()
        
        try:
            async with ctx.typing():
                request_time = datetime.now()
                
                response = self.client.messages.create(
                    model=self.models['kask'],  # Utilise le mod√®le par d√©faut (Haiku 3.5)
                    max_tokens=10,  # Limite petite car on attend juste "OK"
                    messages=[{
                        "role": "user",
                        "content": [{"type": "text", "text": "R√©pond par 'OK' si tu as bien re√ßu mon message"}]
                    }],
                    temperature=0
                )
                
                response_time = datetime.now()
                status = "OK" if response and response.content[0].text.strip().upper() == "OK" else "KO"
                
                # Formatage des timestamps
                time_format = "%H:%M:%S.%f"
                result = (
                    f"```\n"
                    f"Test de latence :\n"
                    f"Ping      : {ping_time.strftime(time_format)}\n"
                    f"Requ√™te   : {request_time.strftime(time_format)}\n"
                    f"R√©ponse   : {response_time.strftime(time_format)}\n"
                    f"Status    : {status}\n"
                    f"```"
                )
            
            await ctx.send(result)
            
        except Exception as e:
            self.logger.error(f"Erreur lors du test de latence: {str(e)}")
            await ctx.send(
                f"```\n"
                f"Test de latence :\n"
                f"Ping      : {ping_time.strftime('%H:%M:%S.%f')}\n"
                f"Status    : KO (Erreur lors de la requ√™te)\n"
                f"```"
            )

    @commands.command(name='ktest2')
    async def test_latency_raw(self, ctx):
        """Test brut de la latence de l'API Claude sans aucun syst√®me annexe"""
        ping_time = datetime.now()
        
        try:
            request_time = datetime.now()
            # Requ√™te directe sans le ctx.typing() ni autre chose
            response = self.client.messages.create(
                model=self.models['kask'],
                max_tokens=10,
                messages=[{
                    "role": "user",
                    "content": [{"type": "text", "text": "Reply with OK"}]
                }],
                temperature=0
            )
            response_time = datetime.now()
            
            status = "OK" if response and response.content[0].text.strip().upper() == "OK" else "KO"
            
            time_format = "%H:%M:%S.%f"
            result = (
                f"```\n"
                f"Test de latence brut :\n"
                f"Ping      : {ping_time.strftime(time_format)}\n"
                f"Requ√™te   : {request_time.strftime(time_format)}\n"
                f"R√©ponse   : {response_time.strftime(time_format)}\n"
                f"Status    : {status}\n"
                f"```"
            )
            
            await ctx.send(result)
            
        except Exception as e:
            self.logger.error(f"Erreur lors du test de latence: {str(e)}")
            await ctx.send(f"Error: {str(e)}")

    @commands.command(name='ktest3')
    async def test_latency_raw_http(self, ctx):
        """Test avec requests directement"""
        import requests
        import time
        
        ping_time = datetime.now()
        
        try:
            request_time = datetime.now()
            
            response = requests.post(
                'https://api.anthropic.com/v1/messages',
                headers={
                    'x-api-key': os.getenv('ANTHROPIC_API_KEY'),
                    'anthropic-version': '2023-06-01',
                    'content-type': 'application/json'
                },
                json={
                    'model': 'claude-3-5-haiku-20241022',
                    'max_tokens': 10,
                    'messages': [{
                        'role': 'user',
                        'content': [{"type": "text", "text": "Reply with OK"}]
                    }]
                },
                timeout=30
            )
            
            response_time = datetime.now()
            
            status = "OK" if response.status_code == 200 else "KO"
            
            time_format = "%H:%M:%S.%f"
            result = (
                f"```\n"
                f"Test de latence HTTP brut :\n"
                f"Ping      : {ping_time.strftime(time_format)}\n"
                f"Requ√™te   : {request_time.strftime(time_format)}\n"
                f"R√©ponse   : {response_time.strftime(time_format)}\n"
                f"Status    : {status}\n"
                f"HTTP Status: {response.status_code}\n"
                f"```"
            )
            
            await ctx.send(result)
            
        except Exception as e:
            self.logger.error(f"Erreur lors du test de latence: {str(e)}")
            await ctx.send(f"Error: {str(e)}")

    @commands.command(name='ktest4')
    async def test_latency_with_debug(self, ctx):
        """Test de latence avec debug r√©seau (logs serveur uniquement)"""
        import requests
        import urllib3
        import logging
        from io import StringIO
        
        # Capture les logs r√©seau dans un buffer
        log_capture = StringIO()
        ch = logging.StreamHandler(log_capture)
        ch.setLevel(logging.DEBUG)
        urllib3_logger = logging.getLogger('urllib3')
        urllib3_logger.addHandler(ch)
        
        ping_time = datetime.now()
        
        try:
            request_time = datetime.now()
            
            response = requests.post(
                'https://api.anthropic.com/v1/messages',
                headers={
                    'x-api-key': os.getenv('ANTHROPIC_API_KEY'),
                    'anthropic-version': '2023-06-01',
                    'content-type': 'application/json'
                },
                json={
                    'model': 'claude-3-5-haiku-20241022',
                    'max_tokens': 10,
                    'messages': [{
                        'role': 'user',
                        'content': [{"type": "text", "text": "Reply with OK"}]
                    }]
                },
                timeout=30
            )
            
            response_time = datetime.now()
            
            # Log d√©taill√© c√¥t√© serveur uniquement
            self.logger.info("=== D√©tails du test de latence ===")
            self.logger.info(f"Logs r√©seau:\n{log_capture.getvalue()}")
            self.logger.info(f"Temps total: {(response_time - ping_time).total_seconds()}s")
            self.logger.info(f"Status: {response.status_code}")
            
            # Message minimal sur Discord
            result = (
                f"```\n"
                f"üîç Test de latence d√©taill√©\n"
                f"‚ûî Dur√©e totale : {(response_time - ping_time).total_seconds():.2f}s\n"
                f"‚ûî Status : {'‚úÖ' if response.status_code == 200 else '‚ùå'}\n"
                f"```"
            )
            
            await ctx.send(result)
            
        except Exception as e:
            self.logger.error(f"Erreur lors du test d√©taill√©: {str(e)}")
            await ctx.send("```\n‚ùå Test √©chou√©\n```")
        finally:
            # Nettoyage des handlers
            urllib3_logger.removeHandler(ch)

    @commands.command(name='kping')
    async def ping_anthropic(self, ctx):
        """Test le temps de connexion TCP vers l'API Anthropic"""
        import socket
        import time
        
        try:
            await ctx.send("üîÑ Test de connexion TCP vers api.anthropic.com...")
            
            start_time = time.time()
            
            # Cr√©ation du socket
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(10)
            
            # Connexion
            s.connect(('api.anthropic.com', 443))
            
            end_time = time.time()
            duration = (end_time - start_time) * 1000  # en millisecondes
            
            s.close()
            
            # Log d√©taill√© c√¥t√© serveur
            self.logger.info(f"Test TCP r√©ussi en {duration:.2f}ms")
            
            # R√©ponse minimaliste sur Discord
            await ctx.send(f"‚úÖ Connexion TCP √©tablie en {duration:.2f}ms")
            
        except socket.timeout:
            self.logger.error("Timeout lors du test TCP")
            await ctx.send("‚ùå Timeout lors de la connexion")
        except Exception as e:
            self.logger.error(f"Erreur lors du test TCP: {str(e)}")
            await ctx.send("‚ùå Erreur lors du test")

    @commands.command(name='kcurl')
    async def curl_anthropic(self, ctx):
        """Test d√©taill√© avec cURL (version s√©curis√©e)"""
        import subprocess
        import time
        
        try:
            await ctx.send("üîÑ Test de connexion HTTPS...")
            
            start_time = time.time()
            
            # curl avec options limit√©es pour la s√©curit√©
            process = subprocess.Popen([
                'curl', 
                '-w', '%{time_connect}, %{time_starttransfer}, %{time_total}',  # On r√©cup√®re juste les timings
                '-s',  # Silencieux
                '-o', '/dev/null',  # Pas de output
                'https://api.anthropic.com/v1/messages'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            output, error = process.communicate()
            
            end_time = time.time()
            total_duration = (end_time - start_time) * 1000
            
            # Log complet c√¥t√© serveur
            self.logger.info(f"=== Test cURL d√©taill√© ===")
            self.logger.info(f"Timings bruts: {output}")
            if error:
                self.logger.info(f"Erreurs/Infos: {error}")
                
            # Parse les timings
            try:
                connect, starttransfer, total = map(float, output.split(','))
                
                # Message Discord avec uniquement les timings essentiels
                result = (
                    f"```\n"
                    f"Test de connexion HTTPS :\n"
                    f"‚ûî Connexion TCP : {connect*1000:.2f}ms\n"
                    f"‚ûî Premier octet : {starttransfer*1000:.2f}ms\n"
                    f"‚ûî Temps total   : {total*1000:.2f}ms\n"
                    f"```"
                )
                
                await ctx.send(result)
                
            except:
                await ctx.send("‚úÖ Test termin√© (voir logs pour d√©tails)")
            
        except Exception as e:
            self.logger.error(f"Erreur lors du test cURL: {str(e)}")
            await ctx.send("‚ùå Erreur lors du test")

# Ajout de la fonction setup n√©cessaire pour le chargement du cog
async def setup(bot):
    await bot.add_cog(ClaudeCommands(bot))